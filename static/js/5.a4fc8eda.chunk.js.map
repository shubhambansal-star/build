{"version":3,"sources":["app/views/sessions/Signin.jsx"],"names":["SigninSchema","yup","shape","email","required","password","min","Signin","state","handleChange","event","persist","setState","target","name","value","handleSubmit","isSubmitting","props","loginWithEmailAndPassword","className","style","backgroundImage","src","width","height","alt","initialValues","this","validationSchema","onSubmit","values","errors","touched","handleBlur","htmlFor","type","onChange","onBlur","backgroundSize","backgroundColor","Component","connect","PropTypes","func","isRequired","user"],"mappings":"gOAOMA,EAAeC,WAAaC,MAAM,CACtCC,MAAOF,WAAaE,MAAM,iBAAiBC,SAAS,qBACpDC,SAAUJ,WAEPK,IAAI,EAAG,qCACPF,SAAS,0BAGRG,E,4MACJC,MAAQ,CACNL,MAAO,GACPE,SAAU,I,EAGZI,aAAe,SAACC,GACdA,EAAMC,UACN,EAAKC,SAAL,eAAiBF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,S,EAGpDC,aAAe,SAACD,EAAD,GAA6B,EAAnBE,aACvB,EAAKC,MAAMC,0BAA0BJ,I,4CAGvC,WACE,OACE,yBACEK,UAAU,mBACVC,MAAO,CACLC,gBAAiB,KAGnB,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,yBACb,yBAAKG,IAAI,aAAaF,MAAO,CAACG,MAAM,OAAOC,OAAO,OAAQC,IAAI,MAEhE,wBAAIN,UAAU,gBAAd,WACA,kBAAC,IAAD,CACEO,cAAeC,KAAKpB,MACpBqB,iBAAkB7B,EAClB8B,SAAUF,KAAKZ,eAEd,gBACCe,EADD,EACCA,OACAC,EAFD,EAECA,OACAC,EAHD,EAGCA,QACAxB,EAJD,EAICA,aACAyB,EALD,EAKCA,WACAlB,EAND,EAMCA,aAND,EAOCC,aAPD,OASC,0BAAMa,SAAUd,GACd,yBAAKI,UAAU,cACb,2BAAOe,QAAQ,SAAf,iBACA,2BACEf,UAAU,sDACVgB,KAAK,QACLtB,KAAK,QACLuB,SAAU5B,EACV6B,OAAQJ,EACRnB,MAAOgB,EAAO5B,QAEf6B,EAAO7B,OAAS8B,EAAQ9B,OACvB,yBAAKiB,UAAU,yBACZY,EAAO7B,QAId,yBAAKiB,UAAU,cACb,2BAAOe,QAAQ,YAAf,YACA,2BACEf,UAAU,oCACVgB,KAAK,WACLtB,KAAK,WACLuB,SAAU5B,EACV6B,OAAQJ,EACRnB,MAAOgB,EAAO1B,WAEf2B,EAAO3B,UAAY4B,EAAQ5B,UAC1B,yBAAKe,UAAU,yBACZY,EAAO3B,WAId,4BACEe,UAAU,8CACVgB,KAAK,UAFP,iBAWV,yBACEhB,UAAU,wBACVC,MAAO,CACLkB,eAAgB,QAChBjB,gBAAiB,oBACjBkB,gBAAgB,qB,GA/FbC,aAgHNC,uBALS,SAAClC,GAAD,MAAY,CAClCW,0BAA2BwB,IAAUC,KAAKC,WAC1CC,KAAMtC,EAAMsC,QAG0B,CACtC3B,+BADauB,CAEZnC","file":"static/js/5.a4fc8eda.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { loginWithEmailAndPassword } from \"app/redux/actions/LoginActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nconst SigninSchema = yup.object().shape({\n  email: yup.string().email(\"Invalid email\").required(\"Email is required\"),\n  password: yup\n    .string()\n    .min(8, \"Password must be 8 character long\")\n    .required(\"Password is required\"),\n});\n\nclass Signin extends Component {\n  state = {\n    email: \"\",\n    password: \"\",\n  };\n\n  handleChange = (event) => {\n    event.persist();\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  handleSubmit = (value, { isSubmitting }) => {\n    this.props.loginWithEmailAndPassword(value);\n  };\n\n  render() {\n    return (\n      <div\n        className=\"auth-layout-wrap\"\n        style={{\n          backgroundImage: \"\",\n        }}\n      >\n        <div className=\"auth-content\">\n          <div className=\"card o-hidden\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <div className=\"p-4\">\n                  <div className=\"auth-logo text-center\">\n                    <img src=\"/logo1.png\" style={{width:\"100%\",height:\"20%\"}} alt=\"\" />\n                  </div>\n                  <h1 className=\"mb-3 text-18\">Sign In</h1>\n                  <Formik\n                    initialValues={this.state}\n                    validationSchema={SigninSchema}\n                    onSubmit={this.handleSubmit}\n                  >\n                    {({\n                      values,\n                      errors,\n                      touched,\n                      handleChange,\n                      handleBlur,\n                      handleSubmit,\n                      isSubmitting,\n                    }) => (\n                      <form onSubmit={handleSubmit}>\n                        <div className=\"form-group\">\n                          <label htmlFor=\"email\">Email address</label>\n                          <input\n                            className=\"form-control form-control-rounded position-relative\"\n                            type=\"email\"\n                            name=\"email\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.email}\n                          />\n                          {errors.email && touched.email && (\n                            <div className=\"text-danger mt-1 ml-2\">\n                              {errors.email}\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"form-group\">\n                          <label htmlFor=\"password\">Password</label>\n                          <input\n                            className=\"form-control form-control-rounded\"\n                            type=\"password\"\n                            name=\"password\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.password}\n                          />\n                          {errors.password && touched.password && (\n                            <div className=\"text-danger mt-1 ml-2\">\n                              {errors.password}\n                            </div>\n                          )}\n                        </div>\n                        <button\n                          className=\"btn btn-rounded btn-primary w-100 my-1 mt-2\"\n                          type=\"submit\"\n                        >\n                          Sign In\n                        </button>\n                      </form>\n                    )}\n                  </Formik>\n                </div>\n              </div>\n              <div\n                className=\"col-md-6 text-center \"\n                style={{\n                  backgroundSize: \"cover\",\n                  backgroundImage: \"url(/logo512.png)\",\n                  backgroundColor:\"#ffffff\"\n                }}\n              >\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  loginWithEmailAndPassword: PropTypes.func.isRequired,\n  user: state.user,\n});\n\nexport default connect(mapStateToProps, {\n  loginWithEmailAndPassword,\n})(Signin);\n"],"sourceRoot":""}